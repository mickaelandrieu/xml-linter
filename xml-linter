#!/usr/bin/env php
<?php
function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}

if ((!$loader = includeIfExists(__DIR__.'/vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../autoload.php'))) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -sS https://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

use Symfony\Component\Finder\Finder;
use Symfony\Component\Config\Util\XmlUtils;

/**
 * @author MickaÃ«l Andrieu <mickael.andrieu@solvolabs.com>
 * 
 * Validate any XML file using XmlUtils::loadFile() function.
 */
(new Application('xml-linter', '2.0.0'))
  ->register('xml-linter')
      ->setDescription('Validate a path or a XML file and outputs encountered errors')
      ->addArgument('path', InputArgument::REQUIRED, 'Filename or a directory')
      ->addOption('xsd', null, InputOption::VALUE_REQUIRED, 'Path of the xsd definition file')
      ->setCode(function(InputInterface $input, OutputInterface $output) {
          $io = new SymfonyStyle($input, $output);
          $errors = 0;

          $path = $input->getArgument('path');
          $xsd = $input->getOption('xsd');

          $validateFile = function ($filename, $xsd) use ($io, &$errors) {
            try {
              XmlUtils::loadFile($filename, $xsd);
            }catch(\InvalidArgumentException $e) {
                $io->error(sprintf('File %s : %s', $filename, $e->getMessage()));
                $errors++;
            }
          };

          if (is_dir($path)) {
            $finder = new Finder();
            foreach($finder->files()->in($path) as $file) {
              $validateFile($file->getPathname(), $xsd);
            } 
          } elseif (is_file($path)) {
            $validateFile($path, $xsd);
          } else {
            $io->error(sprintf('%s is not a valid file or path.', $path));
            $errors++;
          }
          
        if ($errors > 0) {
          return 1;
        }

        $io->success('Validation OK');
      })
  ->getApplication()
  ->setDefaultCommand('xml-linter', true)
->run();
